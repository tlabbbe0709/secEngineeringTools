| datamodel Network_Traffic | spath 
| spath path=objects{}.fields{} output=v 
| spath path=objects{}.calculations{}.outputFields{} output=u 
| eval w=mvappend(v,u) 
| fields - _raw 
| fields modelName w
| mvexpand w 
| eval field=json_extract(w,"fieldName")
| table field
| join field
    [search `cim_Network_Traffic_indexes` tag=communicate tag=network
| head 10000
| fieldsummary maxvals=15
| eventstats max(count) AS total 
| eval percent_coverage=round(count/total*100, 2) 
| table field, percent_coverage, distinct_count, total, values
| spath input=values 
| rename {}.value AS sample_values {}.count AS sample_count distinct_count AS distinct_value_count total AS total_events 
| fillnull value=0 percent_coverage, distinct_value_count, total_events]
| eval cimStatus=case(
    field=action AND NOT match(sample_values,"allowed|blocked|teardown"),"Non-prescribed values found", 
    field=direction AND NOT match(sample_values,"inbound|outbound"),"Non-prescribed values found",
    field=icmp_type AND NOT (sample_values>=0 AND sample_values<=254),"Non-prescribed values found",
    field=tcp_flag AND NOT match(sample_values,"SYN|ACK|FIN|RST|URG|PSH"),"Non-prescribed values found",
    field=transport AND NOT match(sample_values,"icmp|tcp|udp"),"Non-prescribed values found",
    percent_coverage<90,"Less than 90% of events covered",
    1==1,"Okay")
| search cimStatus!="Okay" NOT field IN (dest_bunit, dest_category, dest_priority, src_bunit, src_priority, src_user_bunit, src_user_category, src_user_priority, user_bunit, user_category, user_priority)
| stats values(cimStatus) as cimStatus values(percent_coverage) as precent_coverage by field